(rule
 (target findlib.conf)
 (action (write-file %{target} "path=\"%{project_root}/_build/install/%{context_name}/lib\"")))

(alias
 (name   runtest)
 (deps   (:x README.md)
         (:conf findlib.conf)
         (package mdx)
         (package core)
         (package ppx_jane)
         (:y1 ../../examples/code/gc/barrier_bench/barrier_bench.ml)
         (:y0 ../../examples/code/gc/finalizer/finalizer.ml)
         (source_tree ../../examples/code/gc/barrier_bench)
         (source_tree ../../examples/code/gc/finalizer)
         prelude.ml)
 (action (progn
           (setenv OCAMLFIND_CONF %{conf} (run ocaml-mdx test --prelude=prelude.ml --direction=to-ml %{x}))
           (diff? %{y1} %{y1}.corrected)
           (diff? %{y0} %{y0}.corrected)
           (diff? %{x} %{x}.corrected))))
(alias
 (name   runtest-all)
 (deps   (:x README.md)
         (:conf findlib.conf)
         (package mdx)
         (package core)
         (package ppx_jane)
         (:y1 ../../examples/code/gc/barrier_bench/barrier_bench.ml)
         (:y0 ../../examples/code/gc/finalizer/finalizer.ml)
         (source_tree ../../examples/code/gc/barrier_bench)
         (source_tree ../../examples/code/gc/finalizer)
         prelude.ml)
 (action (progn
           (setenv OCAMLFIND_CONF %{conf} (run ocaml-mdx test --prelude=prelude.ml --direction=to-ml --non-deterministic %{x}))
           (diff? %{y1} %{y1}.corrected)
           (diff? %{y0} %{y0}.corrected)
           (diff? %{x} %{x}.corrected))))
